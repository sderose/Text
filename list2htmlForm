#!/usr/bin/env python3
#
# list2htmlForm
# 2012-04-26: Written by Steven J. DeRose.
#
from __future__ import print_function
import sys
import os
import re
import argparse
import string
import math

__metadata__ = {
    'title'        : "list2htmlForm",
    'rightsHolder' : "Steven J. DeRose",
    'creator'      : "http://viaf.org/viaf/50334488",
    'type'         : "http://purl.org/dc/dcmitype/Software",
    'language'     : "Python 3.7",
    'created'      : "2012-04-26",
    'modified'     : "2020-08-27",
    'publisher'    : "http://github.com/sderose",
    'license'      : "https://creativecommons.org/licenses/by-sa/3.0/"
}
__version__ = __metadata__['modified']


descr = """
=head1 Usage

list2htmlForm [options]

Make each line of a file into an item in an XHTML form.
You can make radio buttons, checkboxes or a pop-up menu,
and lay them out in various ways.


=head1 Options

=over

=item * B<--break>

Put an HTML C<< <br> >> in front of each item (not applicable to I<--type menu>).

=item * B<--group> I<g>

Use I<g> as the group name for buttons.

=item * B<--type>

Radio (default), checkbox, or menu?

=item * B<--verbose>

Add more detailed messages (doesn't do much at the moment).

=item * B<--version>

Display version info and exit.

=back


=head Related Commands


=head1 Known bugs and limitations


=head1 History

* 2012-04-26: Written by Steven J. DeRose.
* 2018-11-07: Cleanup, Py 3.
* 2020-08-07: New layout. Lose use of logging and sjdUtils.


=Rights=

Copyright 2012-04-26 by Steven J. DeRose. This work is licensed under a
Creative Commons Attribution-Share-alike 3.0 unported license.
For further information on this license, see
[https://creativecommons.org/licenses/by-sa/3.0].

For the most recent version, see [http://www.derose.net/steve/utilities]
or [https://github.com/sderose].


=Options
"""


###############################################################################
# Process options
#
try:
    from BlockFormatter import BlockFormatter
    parser = argparse.ArgumentParser(
        description=descr, formatter_class=BlockFormatter)
except ImportError:
    parser = argparse.ArgumentParser(description=descr)

parser.add_argument(
    "--verbose", action='count', default=0,
    help='Add more messages (repeatable).')
parser.add_argument(
    "--break", action='store_true', dest="breakEm",
    help='Put a <br> before each item.')
parser.add_argument(
    "--group", type=str, default="group_01",
    help='Group name for checkbox or radio button.')
parser.add_argument(
    "--type", type=str, default="radio",
    help='Kind of input control: radio or checkbox or menu.')
parser.add_argument(
    "--version", action='version', version=__version__,
    help='Display version information, then exit.')

parser.add_argument(
    "files",        nargs=argparse.REMAINDER,
    help='Path(s) to input file(s)')

args = parser.parse_args()


###############################################################################
#
def clean(s):
    """Turn all non-XML-NAME characters to underscores.
    """
    return(re.sub(r'[^-_.:\w\d]', '_', s)

def doOneFile(fh):
    rec = ""
    recnum = 0

    print('<form id="form_01">')
    if (args.type == "menu"): print("  <select>");
    while (1):
        rec = fh.readline()
        if (not rec): break
        recnum += 1
        item = rec.rstrip()
        if (args.type == "checkbox"):
            inp = ('<input type="{0}" name="{1}" type="{2}"/>{3}'.
                   format(args.type, args.group,
                          clean(item), item.capitalize()))
        elif (args.type == "radio"):
            inp = ('<input type="{0}" name="{1}" type="{2}"/>{3}'.
                   format(args.type, args.group,
                          clean(item), item.capitalize()))
        elif (args.type == "menu"):
            inp = ('<option>{0}</option>'.format(item.capitalize()))
        else:
            sys.stderr.write("Unknown -type: %s.\n" %(args.type))
            sys.exit()
        if (args.breakEm and args.type != "menu"):
            inp = "<br />" + inp
        print("    " + inp)
    # EOF
    if (args.type == "menu"): print("  </select>");
    print('</form>')
    return(recnum)


###############################################################################
# Main
#
totalRecords = 0
totalFiles = 0

if (len(args.files) == 0):
    fh = sys.stdin
for fnum in (range(len(args.files))):
    totalFiles += 1
    f = args.files[fnum]
    if (os.path.isfile(f)):
        fh = open(f, "r")
        totalRecords += doOneFile(fh)
        fh.close()
    else:
        sys.stderr.write("Can't find file '" + f + "'.\n")

sys.stderr.write("Done, %d files, %d records.\n" % (totalFiles, totalRecords))
sys.exit(0)
