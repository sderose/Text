#!/usr/bin/perl -w
#
# numberLines: Add/remove numbers from lines.
# 2009-06-08: Written by Steven J. DeRose.
#
use strict;
use Getopt::Long;
use Encode;

our %metadata = (
    'title'        => "numberLines",
    'description'  => "Add/remove numbers from lines.",
    'rightsHolder' => "Steven J. DeRose",
    'creator'      => "http://viaf.org/viaf/50334488",
    'type'         => "http://purl.org/dc/dcmitype/Software",
    'language'     => "Perl 5.18",
    'created'      => "2009-06-08",
    'modified'     => "2020-08-24",
    'publisher'    => "http://github.com/sderose",
    'license'      => "https://creativecommons.org/licenses/by-sa/3.0/"
);
our $VERSION_DATE = $metadata{'modified'};

=pod

=head1 Usage

numberLines [options]

Print a line number before each line from stdin, similar to C<grep -c>,
I<uniq -c>, etc.

Can also use hex numbers (I<--hex>),
remove numbers (I<--remove>),
insert at the end rather than the beginning (I<--suffix>),
insert each line's length instead of a serial number (I<--byLength>),
squeeze or just not number runs of blank lines, etc.


=head1 Options

=over

=item * B<-b> OR B<--non-blank-only>

Rather than numbering all lines, don't count or prefix lines that contain only
whitespace characters. Cf. C<cat -b>.

=item * B<--byLength>

Instead of putting serial numbers in, insert the length of each line.

=item * B<--delim> I<s>

Delimiter string to put between number and line (default: space).

=item * B<--e> OR B<--ender>

Append "$" to each record (including blank ones), like C<cat -e>.
This is useful for seeing whether there are trailing blanks.
See also I<--enderChar>.

=item * B<--enderChar> I<c>

Use this instead of "$" as the character to append with I<--ender>.

=item * B<--escapeChar> I<c>

Insert this to escape special characters when needed, for example literal occurrences
of the I<--quoteChar> character (when enabled). In such cases, this is also used to
escape itself. Default: "\\".

=item * B<--hex>

Write the numbers in base 16 instead of base 10.

=item * B<--iencoding> I<e>

Assume this character encoding for input.

=item * B<--ignore> I<regex>

Don't count or number or unnumber lines that match I<regex>.

=item * B<--listEncodings>

Show all the encodings supported by I<--iencoding> and I<--oencoding>, and exit.

=item * B<--quote> OR B<-q>

Surround each line with the character given as I<--quoteChar>,
and escape any internal occurrences of that character, using I<--escapeChar>.

=item * B<--quoteChar> I<c>

Use I<c> as the character with which to quote each line (only used if I<--quote> is set).
Default: double-quote (U+0022).

=item * B<--quiet> or B<-q>

Suppress most messages (not that there are many anyway).

=item * B<--remove>

Remove initial numbers, instead of adding them.
This only works for initial (decimal or I<--hex>) digits,
optionally preceded by whitespace, and non-optionally followed by I<--delim>.
Cannot be combined with I<--suffix>.

=item * B<--squeeze> or B<-s>

Reduce runs of blank lines to the first one, like C<cat -s>.
See also my `dropBlankLines.

=item * B<--suffix>

Put the numbers at the ends of lines instead of the beginning.
Also, the I<--delim> goes before the number instead of after.

=item * B<--verbose> or B<-v>

More messages.

=item * B<--version>

Display version info and exit.

=item * B<--width> I<n>

Zero-pad the number to at least this many digits (set C<0> for no padding).

=back


=head1 Related commands

Very similar (on purpose) to C<cat -n>, but doesn't have I<--hex>, I<--width>, I<-q>,
I<delim>, 
or support for Unicode and other encodings. It does have I<-v> (which I plan to add
with more control, similar to my
C<showInvisibles>).

C<deriveData> can insert a new field into each record of a file(s) in
CSV, XSV, and many other roughly "tabular" file formats. The
value to insert can fill in the current record
number (among other things) like C<numberLines>.

C<iota> generates serial-numbered things in many forms, but does not attach
them to incoming data lines. These could be integrated.


=head1 To do

  Option to colorize the number (can instead use C<colorstring>).
  Option to count from/by increment, and use all bases from C<iota>.
  Add equivalents for C<cat> options:
    -e: -v plus add "$" at end of line
    -n: Well, that's our default...
    -t: -v plus tab as ^i
    -u: no output buffering
    -v: control to ^X, \xFF as ^?, Latin-1 as M-[chr-128). But be much more flexiebl
  Option to quote lines and escape internals
  Option to do much more flexible "-v" equiv:
      Esc. as for Perl, C, Python, XML, HTML,.... (how many can be done w/ Python encode?
      Control pictures
  Port to Python, rename to catPP.
  Option to insert file boundary markers
  Integrate w/ PowerWalk
  Support full range of --quoteChar, incl. curlies.
  

=head1 History

  2009-06-08: Written by Steven J. DeRose.
  2010-01-12 sjd: Add -width, -sep, -encoding, -hex, -ignore.
  2011-07-05 sjd: Clean up doc.
  2012-10-05 sjd: Cleanup, add -listEncodings.
  2014-09-09: -- for options.
  2016-10-10: Add --remove to do unnumbering.
  2018-09-27: Add --byLength, --suffix.
  2020-08-30: New layout. Add -b (like C<cat>) to number just non-blank lines.
Add -e, --enderChar, -s.
  2021-07-24: Add -q, --quoteChar, --escapeChar.
  

=head1 Ownership

This work by Steven J. DeRose is licensed under a Creative Commons
Attribution-Share Alike 3.0 Unported License. For further information on
this license, see L<http://creativecommons.org/licenses/by-sa/3.0/>.

For the most recent version, see L<http://www.derose.net/steve/utilities/>.

=cut


###############################################################################
# Options
#
#
my $nonBlankOnly = 0;
my $byLength     = 0;
my $delim        = " ";
my $ender        = 0;
my $enderChar    = "\$";
my $escapeChar   = "\\";
my $iencoding    = "";
my $hex          = 0;
my $ignore       = "";
my $quiet        = 0;
my $quote        = 0;
my $quoteChar    = '"';
my $remove       = 0;
my $squeeze      = 0;
my $suffix       = 0;
my $verbose      = 0;
my $width        = 6;

my %getoptHash = (
    "b|non-blank-only"=> \$nonBlankOnly,
    "byLength!"       => \$byLength,
    "delim=s"         => \$delim,
    "e|ender!"        => \$ender,
    "enderChar=s"     => \$enderChar,
    "escapeChar=s"    => \$escapeChar,
    "hex!"            => \$hex,
    "h|help"          => sub { system "perldoc $0"; exit; },
    "iencoding=s"     => \$iencoding,
    "ignore=s"        => \$ignore,
    "listEncodings"   => sub {
        warn "\nEncodings available:\n";
        my $last = ""; my $buf = "";
        for my $k (Encode->encodings(":all")) {
            my $cur = substr($k,0,2);
            if ($cur ne $last) {
                warn "$buf\n";
                $last = $cur; $buf = "";
            }
            $buf .= "$k ";
        }
        warn "$buf\n";
        exit;
    },
    "quote!"          => \$quote,
    "quoteChar=s"     => \$quoteChar,
    "q|quiet!"        => \$quiet,
    "remove!"         => \$remove,
    "s|squeeze!"      => \$squeeze,
    "suffix!"         => \$suffix,
    "v|verbose+"      => \$verbose,
    "version"         => sub {
        die "Version of $VERSION_DATE, by Steven J. DeRose.\n";
    },
    "width=i"         => \$width,
    );

Getopt::Long::Configure ("ignore_case");
GetOptions(%getoptHash) || die("Bad options.\n");


###############################################################################
#
($suffix && $remove) && die
    "Sorry, can't combine --suffix and --remove.\n";
if ($iencoding ne "") {
    binmode(STDIN, ":encoding($iencoding)") ||
    die "Binmode failed for -iencoding '$iencoding'.\n";
    print("");
    binmode(STDOUT,":encoding($iencoding)");
}


###############################################################################
# Main
#
my $format = "%0$width" . ($hex ? "x":"d");
($verbose) && warn "Format string: '$format'\n";

my $recnum = 0;
my $lastRec = my $rec = "";

while ($lastRec = $rec, $rec = <>) {
    chomp($rec);
    if ($ignore && $rec =~ /$ignore/) {                  # Ignorable
        $rec = ((" " x $width) . $delim . $rec . "\n");
    }
    elsif ($rec =~ m/^\s*$/) {                           # Blank
        if ($squeeze && ($lastRec =~ m/^\s*$/)) {
            next;
        }
    }
    elsif ($remove) {                                    # Remove number
        $recnum++;
        if ($hex) { $rec =~ s/^\s*[\da-fA-F]+$delim//; }
        else { $rec =~ s/^\s*\d+$delim//; }
    }
    else {                                               # Add number
        $recnum++;  
        my $toInsert = ($byLength) ? length($rec) : $recnum;
        my $num = sprintf($format, $toInsert);
        if ($suffix) {
            $rec .= $delim . $num;
        }
        else {
            $rec = $num . $delim . $rec;
        }
    }
    
    if ($quote) {
        $rec =~ s/$escapeChar/$escapeChar$escapeChar/g;
        $rec =~ s/$quoteChar/$escapeChar$quoteChar/g;
        $rec = $quoteChar . $rec . $quoteChar;
    }
    if ($ender) {
        $rec .= $enderChar;
    }
    print("$rec\n");
}

($verbose) && warn "Handled $recnum (non-ignored) lines.\n";
