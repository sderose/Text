#!/usr/bin/env perl -w
#
# findLongLines: Find lines longer than a certain length.
# <=2007: Written by Steven J. DeRose.
#
use strict;
use Getopt::Long;

our %metadata = (
    'title'        => "findLongLines",
    'rightsHolder' => "Steven J. DeRose",
    'creator'      => "http://viaf.org/viaf/50334488",
    'type'         => "http://purl.org/dc/dcmitype/Software",
    'language'     => "Perl 5",
    'created'      => "~2007",
    'modified'     => "2023-11-30",
    'publisher'    => "http://github.com/sderose",
    'license'      => "https://creativecommons.org/licenses/by-sa/3.0/"
);
our $VERSION_DATE = $metadata{'modified'};

=pod

=head1 Usage

longLines [options] [files]

Extracts all lines longer than a certain limit (default 80).
Also reports the length and location of the very longest line.


=head1 Options

=over

=item * B<--len> I<n> OR B<--maxlen> I<n> OR B<-> I<n>

Set a different line-length limit.

=item * B<--linenum>

Prefix the (file and) line number when displaying long lines.

=item * B<--loc>

Report only line numbers, not contents

=item * B<--quiet> OR B<-q>

Suppress most messages.


=item * B<--text>

Disregard binary (non-text) files.

=item * B<--verbose> OR B<-v>

Add more messages.

=back


=head1 Related Commands

C<findLinelengths>: count lines in file(s) by length.

C<wc -L> will report the length of a file's longest line.


=head1 To Do

   Option to prepend actual line lengths to the lines (and ranklist).


=head1 History

    <=2007: Written by Steven J. DeRose.
    2007-11-29 sjd: strict.
    2010-09-12 sjd: cleanup?
    2012-01-16 sjd: Clean up, support STDIN, don't use system() pipe.
    2017-05-05 Add --lineNum. Report lin# and file of longest line. Default to
prefixing filename when > 1 file being done.
    2023-11-30: New layout. Add --text.


=head1 Ownership

This work by Steven J. DeRose is licensed under a Creative Commons
Attribution-Share Alike 3.0 Unported License. For further information on
this license, see L<http://creativecommons.org/licenses/by-sa/3.0/>.

For the most recent version, see L<http://www.derose.net/steve/utilities/>.

=cut


###############################################################################
# Process arguments
#
my $len     = 80;
my $lineNum = 0;
my $loc     = 0;
my $quiet   = 0;
my $text    = 0;
my $verbose = 0;

Getopt::Long::Configure ("ignore_case");
my $result = GetOptions(
    "h|help"         => sub { system "perldoc $0"; exit; },
    "len|maxLen|n=i" => \$len,
    "lineNum!"       => \$lineNum,
    "loc"            => \$loc,
    "q!"             => \$quiet,
    "text!"          => \$text,
    "v+"             => \$verbose,
    "version"        => sub {
        die "Version of $VERSION_DATE, by Steven J. DeRose.\n";
    },
);

($result) || die "Bad options.\n";

if ($len <= 0) {
    warn "Line-length limit -len $len invalid.\n";
    system "perldoc $0";
    exit;
}

my $nFiles = scalar(@ARGV);
if ($nFiles == 0) {
    push @ARGV, "-";
}


###############################################################################
#
my $recnum = 0;
my $totalRecs = 0;
my $longOnes = 0;
my $maxLen = 0;
my $maxLenRecnum = 0;
my $maxLenFile = '';

while (my $file = shift) {
    if ($text && ! -T $file) { next; }
    ($verbose) && warn "Starting file '$file'\n";
    open(IFH, "<$file") || warn "Can't find input file '$file'.\n";
    $recnum = 0;
    while (my $rec = <IFH>) {
        $recnum++;
        chomp $rec;
        if (length($rec) > $maxLen) {
            $maxLen = length($rec);
            $maxLenRecnum = $recnum;
            $maxLenFile = $file;
        }
        if (length($rec) > $len) {
            $longOnes++;
            my $msg = '';
            if ($nFiles || $lineNum) { $msg .= "$file:"; }
            if ($loc || $lineNum) { $msg .= "$recnum:";
            }
            print $msg . $rec . "\n";
        }
    }
    close(IFH);
    $totalRecs += $recnum;
}

if (!$quiet) {
    warn "\nDone: $recnum records, $longOnes over --len $len chars.\n";
    warn "  Longest = $maxLen chars, at line $maxLenRecnum of $maxLenFile.\n";
}
